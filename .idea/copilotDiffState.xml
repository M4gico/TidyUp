<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Scripts/Widget/ApplicationListWidget.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Scripts/Widget/ApplicationListWidget.py" />
              <option name="originalContent" value="from PyQt6.QtWidgets import QWidget, QVBoxLayout, QHBoxLayout, QLabel, QScrollArea, QPushButton&#10;from PyQt6.QtCore import Qt&#10;from PyQt6.QtGui import QPixmap&#10;from typing import List&#10;from Scripts.CustomObjects.Application import Application&#10;&#10;&#10;class ApplicationListWidget(QWidget):&#10;    def __init__(self):&#10;        super().__init__()&#10;        self.setup_ui()&#10;&#10;    def setup_ui(self):&#10;        &quot;&quot;&quot;Initialize the UI components&quot;&quot;&quot;&#10;        main_layout = QVBoxLayout()&#10;&#10;        # Title label&#10;        title_label = QLabel(&quot;Added Applications:&quot;)&#10;        title_label.setStyleSheet(&quot;font-weight: bold; font-size: 12px;&quot;)&#10;        main_layout.addWidget(title_label)&#10;&#10;        # Scroll area for the application list&#10;        self.scroll_area = QScrollArea()&#10;        self.scroll_area.setWidgetResizable(True)&#10;        self.scroll_area.setMinimumHeight(200)&#10;        self.scroll_area.setMaximumHeight(300)&#10;&#10;        # Container widget for the scrollable content&#10;        self.container_widget = QWidget()&#10;        self.container_layout = QVBoxLayout(self.container_widget)&#10;        self.container_layout.setAlignment(Qt.AlignmentFlag.AlignTop)&#10;&#10;        self.scroll_area.setWidget(self.container_widget)&#10;        main_layout.addWidget(self.scroll_area)&#10;&#10;        self.setLayout(main_layout)&#10;&#10;    def add_application(self, application: Application):&#10;        &quot;&quot;&quot;Add a new application to the list display&quot;&quot;&quot;&#10;        app_item_widget = self.create_application_item(application)&#10;        self.container_layout.addWidget(app_item_widget)&#10;&#10;    def create_application_item(self, application: Application) -&gt; QWidget:&#10;        &quot;&quot;&quot;Create a widget for a single application item&quot;&quot;&quot;&#10;        item_widget = QWidget()&#10;        item_layout = QHBoxLayout(item_widget)&#10;        item_layout.setContentsMargins(5, 5, 5, 5)&#10;&#10;        # Icon label&#10;        icon_label = QLabel()&#10;        if hasattr(application, 'icon') and application.icon:&#10;            # Convert QIcon to QPixmap and scale it&#10;            pixmap = application.icon.pixmap(32, 32)&#10;            icon_label.setPixmap(pixmap)&#10;        else:&#10;            # Placeholder if no icon&#10;            icon_label.setText(&quot;No Icon&quot;)&#10;            icon_label.setFixedSize(32, 32)&#10;            icon_label.setStyleSheet(&quot;border: 1px solid gray; text-align: center;&quot;)&#10;&#10;        icon_label.setFixedSize(32, 32)&#10;        icon_label.setAlignment(Qt.AlignmentFlag.AlignCenter)&#10;&#10;        # Application name and path&#10;        info_layout = QVBoxLayout()&#10;&#10;        name_label = QLabel(application.name if application.name else &quot;Unknown Application&quot;)&#10;        name_label.setStyleSheet(&quot;font-weight: bold;&quot;)&#10;&#10;        path_label = QLabel(application.app_path_exe if application.app_path_exe else &quot;No path&quot;)&#10;        path_label.setStyleSheet(&quot;color: gray; font-size: 10px;&quot;)&#10;        path_label.setWordWrap(True)&#10;&#10;        info_layout.addWidget(name_label)&#10;        info_layout.addWidget(path_label)&#10;&#10;        # Remove button&#10;        remove_btn = QPushButton(&quot;Remove&quot;)&#10;        remove_btn.setMaximumWidth(80)&#10;        remove_btn.clicked.connect(lambda: self.remove_application_item(item_widget, application))&#10;&#10;        # Add components to layout&#10;        item_layout.addWidget(icon_label)&#10;        item_layout.addLayout(info_layout)&#10;        item_layout.addWidget(remove_btn)&#10;&#10;        # Style the item&#10;        item_widget.setStyleSheet(&quot;&quot;&quot;&#10;            QWidget {&#10;                border: 1px solid lightgray;&#10;                border-radius: 5px;&#10;                background-color: white;&#10;                margin: 2px;&#10;            }&#10;            QWidget:hover {&#10;                background-color: #f0f0f0;&#10;            }&#10;        &quot;&quot;&quot;)&#10;&#10;        return item_widget&#10;&#10;    def remove_application_item(self, item_widget: QWidget, application: Application):&#10;        &quot;&quot;&quot;Remove an application item from the display&quot;&quot;&quot;&#10;        self.container_layout.removeWidget(item_widget)&#10;        item_widget.deleteLater()&#10;        # Emit signal or call parent method to remove from the actual list&#10;        self.application_removed.emit(application) if hasattr(self, 'application_removed') else None&#10;&#10;    def clear_applications(self):&#10;        &quot;&quot;&quot;Clear all application items from the display&quot;&quot;&quot;&#10;        while self.container_layout.count():&#10;            child = self.container_layout.takeAt(0)&#10;            if child.widget():&#10;                child.widget().deleteLater()&#10;&#10;    def update_applications(self, applications: List[Application]):&#10;        &quot;&quot;&quot;Update the display with a new list of applications&quot;&quot;&quot;&#10;        self.clear_applications()&#10;        for app in applications:&#10;            self.add_application(app)" />
              <option name="updatedContent" value="from PyQt6.QtWidgets import QWidget, QVBoxLayout, QHBoxLayout, QLabel, QScrollArea, QPushButton&#10;from PyQt6.QtCore import Qt&#10;from PyQt6.QtGui import QPixmap&#10;from typing import List&#10;from Scripts.CustomObjects.Application import Application&#10;&#10;&#10;class ApplicationListWidget(QWidget):&#10;    def __init__(self):&#10;        super().__init__()&#10;        self.setup_ui()&#10;&#10;    def setup_ui(self):&#10;        &quot;&quot;&quot;Initialize the UI components&quot;&quot;&quot;&#10;        main_layout = QVBoxLayout()&#10;&#10;        # Title label&#10;        title_label = QLabel(&quot;Added Applications:&quot;)&#10;        title_label.setStyleSheet(&quot;font-weight: bold; font-size: 12px;&quot;)&#10;        main_layout.addWidget(title_label)&#10;&#10;        # Scroll area for the application list&#10;        self.scroll_area = QScrollArea()&#10;        self.scroll_area.setWidgetResizable(True)&#10;        self.scroll_area.setMinimumHeight(200)&#10;        self.scroll_area.setMaximumHeight(300)&#10;&#10;        # Container widget for the scrollable content&#10;        self.container_widget = QWidget()&#10;        self.container_layout = QVBoxLayout(self.container_widget)&#10;        self.container_layout.setAlignment(Qt.AlignmentFlag.AlignTop)&#10;&#10;        self.scroll_area.setWidget(self.container_widget)&#10;        main_layout.addWidget(self.scroll_area)&#10;&#10;        self.setLayout(main_layout)&#10;&#10;    def add_application(self, application: Application):&#10;        &quot;&quot;&quot;Add a new application to the list display&quot;&quot;&quot;&#10;        app_item_widget = self.create_application_item(application)&#10;        self.container_layout.addWidget(app_item_widget)&#10;&#10;    def create_application_item(self, application: Application) -&gt; QWidget:&#10;        &quot;&quot;&quot;Create a widget for a single application item&quot;&quot;&quot;&#10;        item_widget = QWidget()&#10;        item_layout = QHBoxLayout(item_widget)&#10;        item_layout.setContentsMargins(5, 5, 5, 5)&#10;&#10;        # Icon label&#10;        icon_label = QLabel()&#10;        if hasattr(application, 'icon') and application.icon:&#10;            # Convert QIcon to QPixmap and scale it&#10;            pixmap = application.icon.pixmap(32, 32)&#10;            icon_label.setPixmap(pixmap)&#10;        else:&#10;            # Placeholder if no icon&#10;            icon_label.setText(&quot;No Icon&quot;)&#10;            icon_label.setFixedSize(32, 32)&#10;            icon_label.setStyleSheet(&quot;border: 1px solid gray; text-align: center;&quot;)&#10;&#10;        icon_label.setFixedSize(32, 32)&#10;        icon_label.setAlignment(Qt.AlignmentFlag.AlignCenter)&#10;&#10;        # Application name and path&#10;        info_layout = QVBoxLayout()&#10;&#10;        name_label = QLabel(application.name if application.name else &quot;Unknown Application&quot;)&#10;        name_label.setStyleSheet(&quot;font-weight: bold;&quot;)&#10;&#10;        path_label = QLabel(application.app_path_exe if application.app_path_exe else &quot;No path&quot;)&#10;        path_label.setStyleSheet(&quot;color: gray; font-size: 10px;&quot;)&#10;        path_label.setWordWrap(True)&#10;&#10;        info_layout.addWidget(name_label)&#10;        info_layout.addWidget(path_label)&#10;&#10;        # Remove button&#10;        remove_btn = QPushButton(&quot;Remove&quot;)&#10;        remove_btn.setMaximumWidth(80)&#10;        remove_btn.clicked.connect(lambda: self.remove_application_item(item_widget, application))&#10;&#10;        # Add components to layout&#10;        item_layout.addWidget(icon_label)&#10;        item_layout.addLayout(info_layout)&#10;        item_layout.addWidget(remove_btn)&#10;&#10;        # Style the item&#10;        item_widget.setStyleSheet(&quot;&quot;&quot;&#10;            QWidget {&#10;                border: 1px solid lightgray;&#10;                border-radius: 5px;&#10;                background-color: white;&#10;                margin: 2px;&#10;            }&#10;            QWidget:hover {&#10;                background-color: #f0f0f0;&#10;            }&#10;        &quot;&quot;&quot;)&#10;&#10;        return item_widget&#10;&#10;    def remove_application_item(self, item_widget: QWidget, application: Application):&#10;        &quot;&quot;&quot;Remove an application item from the display&quot;&quot;&quot;&#10;        self.container_layout.removeWidget(item_widget)&#10;        item_widget.deleteLater()&#10;        # Emit signal or call parent method to remove from the actual list&#10;        self.application_removed.emit(application) if hasattr(self, 'application_removed') else None&#10;&#10;    def clear_applications(self):&#10;        &quot;&quot;&quot;Clear all application items from the display&quot;&quot;&quot;&#10;        while self.container_layout.count():&#10;            child = self.container_layout.takeAt(0)&#10;            if child.widget():&#10;                child.widget().deleteLater()&#10;&#10;    def update_applications(self, applications: List[Application]):&#10;        &quot;&quot;&quot;Update the display with a new list of applications&quot;&quot;&quot;&#10;        self.clear_applications()&#10;        for app in applications:&#10;            self.add_application(app)&#10;&#10;&#10;if __name__ == &quot;__main__&quot;:&#10;    import sys&#10;    from PyQt6.QtWidgets import QApplication, QMainWindow&#10;    from Scripts.CustomObjects.Application import Application&#10;    from PyQt6.QtGui import QIcon&#10;    &#10;    app = QApplication(sys.argv)&#10;    window = QMainWindow()&#10;    window.setWindowTitle(&quot;ApplicationListWidget Test&quot;)&#10;    window.setGeometry(100, 100, 400, 350)&#10;    &#10;    app_list_widget = ApplicationListWidget()&#10;    window.setCentralWidget(app_list_widget)&#10;    &#10;    # Create dummy applications&#10;    dummy_apps = [&#10;        Application(name=&quot;App One&quot;, app_path_exe=&quot;C:/Program Files/AppOne/appone.exe&quot;, icon=None),&#10;        Application(name=&quot;App Two&quot;, app_path_exe=&quot;C:/Program Files/AppTwo/apptwo.exe&quot;, icon=None),&#10;        Application(name=&quot;App Three&quot;, app_path_exe=&quot;C:/AppThree/appthree.exe&quot;, icon=None)&#10;    ]&#10;    app_list_widget.update_applications(dummy_apps)&#10;    &#10;    window.show()&#10;    sys.exit(app.exec())" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>